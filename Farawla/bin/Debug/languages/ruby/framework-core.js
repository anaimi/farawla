{
	Types: [
		{
			Name: "_Farawla_Global",
			Options: [
				{ Name: "File", Description: "File class", OptionType: "Object", ReturnType: "File" },
				{ Name: "Dir", Description: "Dir class", OptionType: "Object", ReturnType: "Dir" },
				{ Name: "DateTime", Description: "DateTime class", OptionType: "Object", ReturnType: "DateTime" },
				{ Name: "Math", Description: "Math library", OptionType: "Object", ReturnType: "Math" }
			]
		},
		{
			Name: "_Farawla_Function",
			Options: [

			]
		},
		{
			Name: "Object",
			Options: [
				{ Name: "toString()", Description: "Returns a string representation of the current object", OptionType: "Function", ReturnType: "String" }
			]
		},
		{
			Name: "String",
			Options: [
				{ Name: 'new(...)', Description: 'Returns a new string object containing a copy of str.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'yaml_new( klass, tag, val )', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: '%(p1)', Description: 'Format—-Uses str as a format specification, and returns the result of applying it to arg. If the format specification contains more than one substitution, then arg must be an Array containing the values to be substituted. See Kernel::sprintf for details of the format string.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: '*(p1)', Description: 'Copy—-Returns a new String containing integer copies of the receiver.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: '+(p1)', Description: 'Concatenation—-Returns a new String containing other_str concatenated to str.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: '/(other)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: '<<(p1)', Description: 'Append—-Concatenates the given object to str. If the object is a Fixnum between 0 and 255, it is converted to a character before concatenation.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: '<=>(p1)', Description: 'Comparison—-Returns -1 if other_str is less than, 0 if other_str is equal to, and +1 if other_str is greater than str. If the strings are of different lengths, and the strings are equal when compared up to the shortest length, then the longer string is considered greater than the shorter one. If the variable $= is false, the comparison is based on comparing the binary values of each character in the string. In older versions of Ruby, setting $= allowed case-insensitive comparisons; this is now deprecated in favor of using casecmp.<=> is the basis for the methods <, <=, >, >=, and between?, included from module Comparable. The method String#== does not use Comparable#==.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: '==(p1)', Description: 'Equality—-If obj is not a String, returns false. Otherwise, returns true if str <=> obj returns zero.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: '=~(p1)', Description: 'Match—-If obj is a Regexp, use it as a pattern to match against str,and returns the position the match starts, or nil if there is no match. Otherwise, invokes obj.=~, passing str as an argument. The default =~ in Object returns false.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: '[](...)', Description: 'Element Reference—-If passed a single Fixnum, returns the code of the character at that position. If passed two Fixnum objects, returns a substring starting at the offset given by the first, and a length given by the second. If given a range, a substring containing characters at offsets given by the range is returned. In all three cases, if an offset is negative, it is counted from the end of str. Returns nil if the initial offset falls outside the string, the length is negative, or the beginning of the range is greater than the end.If a Regexp is supplied, the matching portion of str is returned. If a numeric parameter follows the regular expression, that component of the MatchData is returned instead. If a String is given, that string is returned if it occurs in str. In both cases, nil is returned if there is no match.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: '[]=(...)', Description: 'Element Assignment—-Replaces some or all of the content of str. The portion of the string affected is determined using the same criteria as String#[]. If the replacement string is not the same length as the text it is replacing, the string will be adjusted accordingly. If the regular expression or string is used as the index doesn’t match a position in the string, IndexError is raised. If the regular expression form is used, the optional second Fixnum allows you to specify which portion of the match to replace (effectively using the MatchData indexing rules. The forms that take a Fixnum will raise an IndexError if the value is out of range; the Range form will raise a RangeError, and the Regexp and String forms will silently ignore the assignment.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'ankoder_camelize()', Description: 'convert “undercore_string” in “UnderscoreString”Method from Rails', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'block_scanf(fstr,&b)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'bytes()', Description: 'Returns an enumerator that gives each byte in the string. If a block is given, it iterates over each byte in the string.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'bytesize()', Description: 'Returns the length of str.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'capitalize()', Description: 'Returns a copy of str with the first character converted to uppercase and the remainder to lowercase.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'capitalize!()', Description: 'Modifies str by converting the first character to uppercase and the remainder to lowercase. Returns nil if no changes are made.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'casecmp(p1)', Description: 'Case-insensitive version of String#<=>.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'center(...)', Description: 'If integer is greater than the length of str, returns a new String of length integer with str centered and padded with padstr; otherwise, returns str.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'chars()', Description: 'Returns an enumerator that gives each character in the string. If a block is given, it iterates over each character in the string.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'chomp(...)', Description: 'Returns a new String with the given record separator removed from the end of str (if present). If $/ has not been changed from the default Ruby record separator, then chomp also removes carriage return characters (that is it will remove \\n, \\r, and \\r\\n).', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'chomp!(...)', Description: 'Modifies str in place as described for chomp, returning str, or nil if no modifications were made.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'chop()', Description: 'Returns a new String with the last character removed. If the string ends with \\r\\n, both characters are removed. Applying chop to an empty string returns an empty string. chomp is often a safer alternative, as it leaves the string unchanged if it doesn’t end in a record separator.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'chop()', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'chop!()', Description: 'Processes str as for chop, returning str, or nil if str is the empty string. See also chomp!.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'chop!()', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'concat(p1)', Description: 'Append—-Concatenates the given object to str. If the object is a Fixnum between 0 and 255, it is converted to a character before concatenation.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'count(...)', Description: 'Each other_str parameter defines a set of characters to count. The intersection of these sets defines the characters to count in str. Any other_str that starts with a caret (^) is negated. The sequence c1—c2 means all characters between c1 and c2.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'crypt(p1)', Description: 'Applies a one-way cryptographic hash to str by invoking the standard library function crypt. The argument is the salt string, which should be two characters long, each character drawn from [a-zA-Z0-9./].', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'delete(...)', Description: 'Returns a copy of str with all characters in the intersection of its arguments deleted. Uses the same rules for building the set of characters as count.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'delete(del)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'delete!(...)', Description: 'Performs a delete operation in place, returning str, or nil if str was not modified.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'delete!(del)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'downcase()', Description: 'Returns a copy of str with all uppercase letters replaced with their lowercase counterparts. The operation is locale insensitive—-only characters ``A’’ to ``Z’’ are affected.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'downcase!()', Description: 'Downcases the contents of str, returning nil if no changes were made.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'dump()', Description: 'Produces a version of str with all nonprinting characters replaced by \\nnn notation and all special characters escaped.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'each(...)', Description: 'Splits str using the supplied parameter as the record separator ($/ by default), passing each substring in turn to the supplied block. If a zero-length record separator is supplied, the string is split into paragraphs delimited by multiple successive newlines.produces:', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'each_byte()', Description: 'Passes each byte in str to the given block.produces:', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'each_char()', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'each_char()', Description: 'Passes each character in str to the given block.produces:', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'each_line(...)', Description: 'Splits str using the supplied parameter as the record separator ($/ by default), passing each substring in turn to the supplied block. If a zero-length record separator is supplied, the string is split into paragraphs delimited by multiple successive newlines.produces:', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'empty?()', Description: 'Returns true if str has a length of zero.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'end_regexp()', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'end_with?(...)', Description: 'Returns true if str ends with the suffix given.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'eql?(p1)', Description: 'Two strings are equal if the have the same length and content.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'ext(newext=)', Description: 'Replace the file extension with newext. If there is no extension on the string, append the new extension to the end. If the new extension is not given, or is the empty string, remove any existing extension.ext is a user added method for the String class.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'gsub(...)', Description: 'Returns a copy of str with all occurrences of pattern replaced with either replacement or the value of the block. The pattern will typically be a Regexp; if it is a String then no regular expression metacharacters will be interpreted (that is /\\d/ will match a digit, but \'\\d\' will match a backslash followed by a ‘d’).If a string is used as the replacement, special variables from the match (such as $& and $1) cannot be substituted into it, as substitution into the string occurs before the pattern match starts. However, the sequences \\1, \\2, and so on may be used to interpolate successive groups in the match.In the block form, the current match string is passed in as a parameter, and variables such as $1, $2, $`, $&, and $\' will be set appropriately. The value returned by the block will be substituted for the match on each call.The result inherits any tainting in the original string or any supplied replacement string.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'gsub!(...)', Description: 'Performs the substitutions of gsub in place, returning str, or nil if no substitutions were performed.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'hash()', Description: 'Return a hash based on the string’s length and content.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'hex()', Description: 'Treats leading characters from str as a string of hexadecimal digits (with an optional sign and an optional 0x) and returns the corresponding number. Zero is returned on error.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'include?(p1)', Description: 'Returns true if str contains the given string or character.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'index(...)', Description: 'Returns the index of the first occurrence of the given substring, character (fixnum), or pattern (regexp) in str. Returns nil if not found. If the second parameter is present, it specifies the position in the string to begin the search.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'initialize_copy(p1)', Description: 'Replaces the contents and taintedness of str with the corresponding values in other_str.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'insert(p1, p2)', Description: 'Inserts other_str before the character at the given index, modifying str. Negative indices count from the end of the string, and insert after the given character. The intent is insert aString so that it starts at the given index.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'inspect()', Description: 'Returns a printable version of str, with special characters escaped.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'intern()', Description: 'Returns the Symbol corresponding to str, creating the symbol if it did not previously exist. See Symbol#id2name.This can also be used to create symbols that cannot be represented using the :xxx notation.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'is_binary_data?()', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'is_complex_yaml?()', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'iseuc()', Description: 'Returns whether self’s encoding is EUC-JP or not.Note don’t expect this return value is MatchData.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'issjis()', Description: 'Returns whether self’s encoding is Shift_JIS or not.Note don’t expect this return value is MatchData.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'isutf8()', Description: 'Returns whether self’s encoding is UTF-8 or not.Note don’t expect this return value is MatchData.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'jcount(str)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'jlength()', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'jsize()', Description: 'Alias for jlength', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'kconv(out_code, in_code=Kconv::AUTO)', Description: 'Convert self to out_code. out_code and in_code are given as constants of Kconv.Note This method decode MIME encoded string and convert halfwidth katakana to fullwidth katakana. If you don’t want to decode them, use NKF.nkf.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'length()', Description: 'Returns the length of str.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'lines(...)', Description: 'Returns an enumerator that gives each line in the string. If a block is given, it iterates over each line in the string.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'ljust(...)', Description: 'If integer is greater than the length of str, returns a new String of length integer with str left justified and padded with padstr; otherwise, returns str.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'lstrip()', Description: 'Returns a copy of str with leading whitespace removed. See also rstrip and strip.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'lstrip!()', Description: 'Removes leading whitespace from str, returning nil if no change was made. See also rstrip! and strip!.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'match(p1)', Description: 'Converts pattern to a Regexp (if it isn’t already one), then invokes its match method on str.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'mbchar?()', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'next()', Description: 'Returns the successor to str. The successor is calculated by incrementing characters starting from the rightmost alphanumeric (or the rightmost character if there are no alphanumerics) in the string. Incrementing a digit always results in another digit, and incrementing a letter results in another letter of the same case. Incrementing nonalphanumerics uses the underlying character set’s collating sequence.If the increment generates a ``carry,’’ the character to the left of it is incremented. This process repeats until there is no carry, adding an additional character if necessary.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'next!()', Description: 'Equivalent to succ, but modifies the receiver in place.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'oct()', Description: 'Treats leading characters of str as a string of octal digits (with an optional sign) and returns the corresponding number. Returns 0 if the conversion fails.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'partition(...)', Description: 'Searches the string for sep and returns the part before it, the sep, and the part after it. If sep is not found, returns str and two empty strings. If no argument is given, Enumerable#partition is called.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'pathmap(spec=nil, &block)', Description: 'Map the path according to the given specification. The specification controls the details of the mapping. The following special patterns are recognized:The %d specifier can also have a numeric prefix (e.g. ‘%2d’). If the number is positive, only return (up to) n directories in the path, starting from the left hand side. If n is negative, return (up to) |n| directories from the right hand side of the path.Examples:Also the %d, %p, %f, %n, %x, and %X operators can take a pattern/replacement argument to perform simple string substititions on a particular part of the path. The pattern and replacement are speparated by a comma and are enclosed by curly braces. The replacement spec comes after the % character but before the operator letter. (e.g. “%{old,new}d”). Muliple replacement specs should be separated by semi-colons (e.g. “%{old,new;src,bin}d”).Regular expressions may be used for the pattern, and back refs may be used in the replacement text. Curly braces, commas and semi-colons are excluded from both the pattern and replacement text (let’s keep parsing reasonable).For example:returns:If the replacement text is ‘*’, then a block may be provided to perform some arbitrary calculation for the replacement.For example:Returns:', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'pathmap_explode()', Description: 'Explode a path into individual components. Used by pathmap.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'pathmap_partial(n)', Description: 'Extract a partial path from the path. Include n directories from the front end (left hand side) if n is positive. Include |n| directories from the back end (right hand side) if n is negative.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'pathmap_replace(patterns, &block)', Description: 'Preform the pathmap replacement operations on the given path. The patterns take the form ‘pat1,rep1;pat2,rep2…’.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'replace(p1)', Description: 'Replaces the contents and taintedness of str with the corresponding values in other_str.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'reverse()', Description: 'Returns a new string with the characters from str in reverse order.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'reverse!()', Description: 'Reverses str in place.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'rindex(...)', Description: 'Returns the index of the last occurrence of the given substring, character (fixnum), or pattern (regexp) in str. Returns nil if not found. If the second parameter is present, it specifies the position in the string to end the search—-characters beyond this point will not be considered.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'rjust(...)', Description: 'If integer is greater than the length of str, returns a new String of length integer with str right justified and padded with padstr; otherwise, returns str.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'rpartition(p1)', Description: 'Searches sep in the string from the end of the string, and returns the part before it, the sep, and the part after it. If sep is not found, returns two empty strings and str.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'rstrip()', Description: 'Returns a copy of str with trailing whitespace removed. See also lstrip and strip.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'rstrip!()', Description: 'Removes trailing whitespace from str, returning nil if no change was made. See also lstrip! and strip!.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'scan(p1)', Description: 'Both forms iterate through str, matching the pattern (which may be a Regexp or a String). For each match, a result is generated and either added to the result array or passed to the block. If the pattern contains no groups, each individual result consists of the matched string, $&. If the pattern contains groups, each individual result is itself an array containing one entry per group.And the block form:produces:', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'scanf(fstr,&b)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'shellescape()', Description: 'Escapes str so that it can be safely used in a Bourne shell command line. See Shellwords::shellescape for details.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'shellsplit()', Description: 'Splits str into an array of tokens in the same way the UNIX Bourne shell does. See Shellwords::shellsplit for details.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'size()', Description: 'Returns the length of str.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'slice(...)', Description: 'Element Reference—-If passed a single Fixnum, returns the code of the character at that position. If passed two Fixnum objects, returns a substring starting at the offset given by the first, and a length given by the second. If given a range, a substring containing characters at offsets given by the range is returned. In all three cases, if an offset is negative, it is counted from the end of str. Returns nil if the initial offset falls outside the string, the length is negative, or the beginning of the range is greater than the end.If a Regexp is supplied, the matching portion of str is returned. If a numeric parameter follows the regular expression, that component of the MatchData is returned instead. If a String is given, that string is returned if it occurs in str. In both cases, nil is returned if there is no match.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'slice!(...)', Description: 'Deletes the specified portion from str, and returns the portion deleted. The forms that take a Fixnum will raise an IndexError if the value is out of range; the Range form will raise a RangeError, and the Regexp and String forms will silently ignore the assignment.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'split(...)', Description: 'Divides str into substrings based on a delimiter, returning an array of these substrings.If pattern is a String, then its contents are used as the delimiter when splitting str. If pattern is a single space, str is split on whitespace, with leading whitespace and runs of contiguous whitespace characters ignored.If pattern is a Regexp, str is divided where the pattern matches. Whenever the pattern matches a zero-length string, str is split into individual characters.If pattern is omitted, the value of $; is used. If $; is nil (which is the default), str is split on whitespace as if ` ’ were specified.If the limit parameter is omitted, trailing null fields are suppressed. If limit is a positive number, at most that number of fields will be returned (if limit is 1, the entire string is returned as the only entry in an array). If negative, there is no limit to the number of fields returned, and trailing null fields are not suppressed.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'squeeze(del=nil)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'squeeze(...)', Description: 'Builds a set of characters from the other_str parameter(s) using the procedure described for count. Returns a new string where runs of the same character that occur in this set are replaced by a single character. If no arguments are given, all runs of identical characters are replaced by a single character.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'squeeze!(...)', Description: 'Squeezes str in place, returning either str, or nil if no changes were made.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'squeeze!(del=nil)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'start_with?(...)', Description: 'Returns true if str starts with the prefix given.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'strip()', Description: 'Returns a copy of str with leading and trailing whitespace removed.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'strip!()', Description: 'Removes leading and trailing whitespace from str. Returns nil if str was not altered.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'sub(...)', Description: 'Returns a copy of str with the first occurrence of pattern replaced with either replacement or the value of the block. The pattern will typically be a Regexp; if it is a String then no regular expression metacharacters will be interpreted (that is /\\d/ will match a digit, but \'\\d\' will match a backslash followed by a ‘d’).If the method call specifies replacement, special variables such as $& will not be useful, as substitution into the string occurs before the pattern match starts. However, the sequences \\1, \\2, etc., may be used.In the block form, the current match string is passed in as a parameter, and variables such as $1, $2, $`, $&, and $\' will be set appropriately. The value returned by the block will be substituted for the match on each call.The result inherits any tainting in the original string or any supplied replacement string.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'sub!(...)', Description: 'Performs the substitutions of sub in place, returning str, or nil if no substitutions were performed.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'succ()', Description: 'Returns the successor to str. The successor is calculated by incrementing characters starting from the rightmost alphanumeric (or the rightmost character if there are no alphanumerics) in the string. Incrementing a digit always results in another digit, and incrementing a letter results in another letter of the same case. Incrementing nonalphanumerics uses the underlying character set’s collating sequence.If the increment generates a ``carry,’’ the character to the left of it is incremented. This process repeats until there is no carry, adding an additional character if necessary.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'succ()', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'succ!()', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'succ!()', Description: 'Equivalent to succ, but modifies the receiver in place.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'sum(...)', Description: 'Returns a basic n-bit checksum of the characters in str, where n is the optional Fixnum parameter, defaulting to 16. The result is simply the sum of the binary value of each character in str modulo 2n - 1. This is not a particularly good checksum.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'swapcase()', Description: 'Returns a copy of str with uppercase alphabetic characters converted to lowercase and lowercase characters converted to uppercase.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'swapcase!()', Description: 'Equivalent to swapcase, but modifies the receiver in place, returning str, or nil if no changes were made.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'to_f()', Description: 'Returns the result of interpreting leading characters in str as a floating point number. Extraneous characters past the end of a valid number are ignored. If there is not a valid number at the start of str, 0.0 is returned. This method never raises an exception.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'to_i(...)', Description: 'Returns the result of interpreting leading characters in str as an integer base base (between 2 and 36). Extraneous characters past the end of a valid number are ignored. If there is not a valid number at the start of str, 0 is returned. This method never raises an exception.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'to_s()', Description: 'Returns the receiver.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'to_str()', Description: 'Returns the receiver.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'to_sym()', Description: 'Returns the Symbol corresponding to str, creating the symbol if it did not previously exist. See Symbol#id2name.This can also be used to create symbols that cannot be represented using the :xxx notation.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'to_yaml( opts = {} )', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'toeuc()', Description: 'Convert self to EUC-JPNote This method decode MIME encoded string and convert halfwidth katakana to fullwidth katakana. If you don’t want it, use NKF.nkf(‘-exm0’, str).', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'tojis()', Description: 'Convert self to ISO-2022-JPNote This method decode MIME encoded string and convert halfwidth katakana to fullwidth katakana. If you don’t want it, use NKF.nkf(‘-jxm0’, str).', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'tosjis()', Description: 'Convert self to Shift_JISNote This method decode MIME encoded string and convert halfwidth katakana to fullwidth katakana. If you don’t want it, use NKF.nkf(‘-sxm0’, str).', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'toutf16()', Description: 'Convert self to UTF-16Note This method decode MIME encoded string and convert halfwidth katakana to fullwidth katakana. If you don’t want it, use NKF.nkf(‘-w16xm0’, str).', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'toutf8()', Description: 'Convert self to UTF-8Note This method decode MIME encoded string and convert halfwidth katakana to fullwidth katakana. If you don’t want it, use NKF.nkf(‘-wxm0’, str).', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'tr(p1, p2)', Description: 'Returns a copy of str with the characters in from_str replaced by the corresponding characters in to_str. If to_str is shorter than from_str, it is padded with its last character. Both strings may use the c1—c2 notation to denote ranges of characters, and from_str may start with a ^, which denotes all characters except those listed.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'tr(from, to)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'tr!(p1, p2)', Description: 'Translates str in place, using the same rules as tr. Returns str, or nil if no changes were made.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'tr!(from, to)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'tr_s(from, to)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'tr_s(p1, p2)', Description: 'Processes a copy of str as described under tr, then removes duplicate characters in regions that were affected by the translation.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'tr_s!(from, to)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'tr_s!(p1, p2)', Description: 'Performs tr_s processing on str in place, returning str, or nil if no changes were made.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'unpack(p1)', Description: 'Decodes str (which may contain binary data) according to the format string, returning an array of each value extracted. The format string consists of a sequence of single-character directives, summarized in the table at the end of this entry. Each directive may be followed by a number, indicating the number of times to repeat with this directive. An asterisk (``*‘’) will use up all remaining elements. The directives sSiIlL may each be followed by an underscore (``_’‘) to use the underlying platform’s native size for the specified type; otherwise, it uses a platform-independent consistent size. Spaces are ignored in the format string. See also Array#pack.This table summarizes the various formats and the Ruby classes returned by each.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'upcase()', Description: 'Returns a copy of str with all lowercase letters replaced with their uppercase counterparts. The operation is locale insensitive—-only characters ``a’’ to ``z’’ are affected.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'upcase!()', Description: 'Upcases the contents of str, returning nil if no changes were made.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'upto(...)', Description: 'Iterates through successive values, starting at str and ending at other_str inclusive, passing each value in turn to the block. The succ method is used to generate each value. If optional second argument exclusive is omitted or is false, the last value will be included; otherwise it will be excluded.produces:', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: '_expand_ch(str)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: '_regex_quote(str)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'expand_ch_hash(from, to)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'original_succ()', Description: 'Alias for succ', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'original_succ!()', Description: 'Alias for succ!', OptionType: 'Function', ReturnType: 'Object' }
			]
		},
		{
			Name: "Number",
			Options: [

			]
		},
		{
			Name: "Math",
			Options: [
				{ Name: 'acos(p1)', Description: 'Computes the arc cosine of x. Returns 0..PI.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'acos(z)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'acos!(z)', Description: 'Alias for acos', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'acosh(p1)', Description: 'Computes the inverse hyperbolic cosine of x.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'acosh(z)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'acosh!(z)', Description: 'Alias for acosh', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'asin(p1)', Description: 'Computes the arc sine of x. Returns -{PI/2} .. {PI/2}.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'asin(z)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'asin!(z)', Description: 'Alias for asin', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'asinh(p1)', Description: 'Computes the inverse hyperbolic sine of x.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'asinh(z)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'asinh!(z)', Description: 'Alias for asinh', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'atan(p1)', Description: 'Computes the arc tangent of x. Returns -{PI/2} .. {PI/2}.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'atan(z)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'atan!(z)', Description: 'Alias for atan', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'atan2(p1, p2)', Description: 'Computes the arc tangent given y and x. Returns -PI..PI.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'atan2(y,x)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'atan2!(y,x)', Description: 'Alias for atan2', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'atanh(p1)', Description: 'Computes the inverse hyperbolic tangent of x.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'atanh(z)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'atanh!(z)', Description: 'Alias for atanh', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'cos(p1)', Description: 'Computes the cosine of x (expressed in radians). Returns -1..1.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'cos(z)', Description: 'Redefined to handle a Complex argument.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'cos!(z)', Description: 'Alias for cos', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'cosh(p1)', Description: 'Computes the hyperbolic cosine of x (expressed in radians).', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'cosh(z)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'cosh!(z)', Description: 'Alias for cosh', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'erf(p1)', Description: 'Calculates the error function of x.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'erfc(p1)', Description: 'Calculates the complementary error function of x.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'exp(p1)', Description: 'Returns e**x.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'exp(z)', Description: 'Redefined to handle a Complex argument.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'exp!(z)', Description: 'Alias for exp', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'frexp(p1)', Description: 'Returns a two-element array containing the normalized fraction (a Float) and exponent (a Fixnum) of numeric.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'hypot(p1, p2)', Description: 'Returns sqrt(x**2 + y**2), the hypotenuse of a right-angled triangle with sides x and y.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'ldexp(p1, p2)', Description: 'Returns the value of flt(2*int).', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'log(p1)', Description: 'Returns the natural logarithm of numeric.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'log(z)', Description: 'Redefined to handle a Complex argument.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'log!(z)', Description: 'Alias for log', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'log10(p1)', Description: 'Returns the base 10 logarithm of numeric.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'log10(z)', Description: 'Redefined to handle a Complex argument.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'log10!(z)', Description: 'Alias for log10', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'rsqrt(a)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'sin(p1)', Description: 'Computes the sine of x (expressed in radians). Returns -1..1.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'sin(z)', Description: 'Redefined to handle a Complex argument.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'sin!(z)', Description: 'Alias for sin', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'sinh(p1)', Description: 'Computes the hyperbolic sine of x (expressed in radians).', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'sinh(z)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'sinh!(z)', Description: 'Alias for sinh', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'sqrt(p1)', Description: 'Returns the non-negative square root of numeric.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'sqrt(z)', Description: 'Redefined to handle a Complex argument.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'sqrt(z)', Description: 'Redefined to handle a Complex argument.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'sqrt(a)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'sqrt!(z)', Description: 'Alias for sqrt', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'tan(p1)', Description: 'Returns the tangent of x (expressed in radians).', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'tan(z)', Description: 'Redefined to handle a Complex argument.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'tan!(z)', Description: 'Alias for tan', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'tanh(p1)', Description: 'Computes the hyperbolic tangent of x (expressed in radians).', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'tanh(z)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'tanh!(z)', Description: 'Alias for tanh', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'acos(z)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'acos!(z)', Description: 'Alias for acos', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'acosh(z)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'acosh!(z)', Description: 'Alias for acosh', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'asin(z)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'asin!(z)', Description: 'Alias for asin', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'asinh(z)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'asinh!(z)', Description: 'Alias for asinh', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'atan(z)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'atan!(z)', Description: 'Alias for atan', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'atan2(y,x)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'atan2!(y,x)', Description: 'Alias for atan2', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'atanh(z)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'atanh!(z)', Description: 'Alias for atanh', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'cos(z)', Description: 'Redefined to handle a Complex argument.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'cos!(z)', Description: 'Alias for cos', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'cosh(z)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'cosh!(z)', Description: 'Alias for cosh', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'exp(z)', Description: 'Redefined to handle a Complex argument.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'exp!(z)', Description: 'Alias for exp', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'log(z)', Description: 'Redefined to handle a Complex argument.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'log!(z)', Description: 'Alias for log', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'log10(z)', Description: 'Redefined to handle a Complex argument.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'log10!(z)', Description: 'Alias for log10', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'rsqrt(a)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'sin(z)', Description: 'Redefined to handle a Complex argument.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'sin!(z)', Description: 'Alias for sin', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'sinh(z)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'sinh!(z)', Description: 'Alias for sinh', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'sqrt(z)', Description: 'Redefined to handle a Complex argument.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'sqrt(a)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'sqrt!(z)', Description: 'Alias for sqrt', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'tan(z)', Description: 'Redefined to handle a Complex argument.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'tan!(z)', Description: 'Alias for tan', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'tanh(z)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'tanh!(z)', Description: 'Alias for tanh', OptionType: 'Function', ReturnType: 'Object' }
			]
		},
		{
			Name: "Array",
			Options: [
				{ Name: '[](...)', Description: 'Returns a new array populated with the given objects.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'new(...)', Description: 'Returns a new array. In the first form, the new array is empty. In the second it is created with size copies of obj (that is, size references to the same obj_). The third form creates a copy of the array passed as a parameter (the array is generated by calling toary on the parameter). In the last form, an array of the given size is created. Each element in this array is calculated by passing the element’s index to the given block and storing the return value.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: '&(p1)', Description: 'Set Intersection—-Returns a new array containing elements common to the two arrays, with no duplicates.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: '*(p1)', Description: 'Repetition—-With a String argument, equivalent to self.join(str). Otherwise, returns a new array built by concatenating the int copies of self.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: '+(p1)', Description: 'Concatenation—-Returns a new array built by concatenating the two arrays together to produce a third array.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: '-(p1)', Description: 'Array Difference—-Returns a new array that is a copy of the original array, removing any items that also appear in other_array. (If you need set-like behavior, see the library class Set.)', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: '<<(p1)', Description: 'Append—-Pushes the given object on to the end of this array. This expression returns the array itself, so several appends may be chained together.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: '<=>(p1)', Description: 'Comparison—-Returns an integer (-1, 0, or +1) if this array is less than, equal to, or greater than other_array. Each object in each array is compared (using <=>). If any value isn’t equal, then that inequality is the return value. If all the values found are equal, then the return is based on a comparison of the array lengths. Thus, two arrays are ``equal’’ according to Array#<=> if and only if they have the same length and the value of each element is equal to the value of the corresponding element in the other array.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: '==(p1)', Description: 'Equality—-Two arrays are equal if they contain the same number of elements and if each element is equal to (according to Object.==) the corresponding element in the other array.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: '[](...)', Description: 'Element Reference—-Returns the element at index, or returns a subarray starting at start and continuing for length elements, or returns a subarray specified by range. Negative indices count backward from the end of the array (-1 is the last element). Returns nil if the index (or starting index) are out of range.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: '[]=(...)', Description: 'Element Assignment—-Sets the element at index, or replaces a subarray starting at start and continuing for length elements, or replaces a subarray specified by range. If indices are greater than the current capacity of the array, the array grows automatically. A negative indices will count backward from the end of the array. Inserts elements if length is zero. If nil is used in the second and third form, deletes elements from self. An IndexError is raised if a negative index points past the beginning of the array. See also push, and unshift.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'abbrev(pattern = nil)', Description: 'Calculates the set of unambiguous abbreviations for the strings in self. If passed a pattern or a string, only the strings matching the pattern or starting with the string are considered.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'assoc(p1)', Description: 'Searches through an array whose elements are also arrays comparing obj with the first element of each contained array using obj.==. Returns the first contained array that matches (that is, the first associated array), or nil if no match is found. See also rassoc.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'at(p1)', Description: 'Returns the element at index. A negative index counts from the end of self. Returns nil if the index is out of range. See also Array#[]. (at is slightly faster than Array#[], as it does not accept ranges and so on.)', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'choice()', Description: 'Choose a random element from an array.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'clear()', Description: 'Removes all elements from self.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'collect()', Description: 'Invokes block once for each element of self. Creates a new array containing the values returned by the block. See also Enumerable#collect.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'collect!()', Description: 'Invokes the block once for each element of self, replacing the element with the value returned by block. See also Enumerable#collect.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'combination(p1)', Description: 'When invoked with a block, yields all combinations of length n of elements from ary and then returns ary itself. The implementation makes no guarantees about the order in which the combinations are yielded.When invoked without a block, returns an enumerator object instead.Examples:', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'combine(arr)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'compact()', Description: 'Returns a copy of self with all nil elements removed.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'compact!()', Description: 'Removes nil elements from array. Returns nil if no changes were made.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'concat(p1)', Description: 'Appends the elements in other_array to self.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'count(...)', Description: 'Returns the number of elements. If an argument is given, counts the number of elements which equals to obj. If a block is given, counts the number of elements yielding a true value.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'cycle(...)', Description: 'Calls block for each element repeatedly n times or forever if none or nil is given. If a non-positive number is given or the array is empty, does nothing. Returns nil if the loop has finished without getting interrupted.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'dclone()', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'delete(p1)', Description: 'Deletes items from self that are equal to obj. If the item is not found, returns nil. If the optional code block is given, returns the result of block if the item is not found.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'delete_at(p1)', Description: 'Deletes the element at the specified index, returning that element, or nil if the index is out of range. See also slice!.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'delete_if()', Description: 'Deletes every element of self for which block evaluates to true.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'drop(p1)', Description: 'Drops first n elements from ary, and returns rest elements in an array.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'drop_while()', Description: 'Drops elements up to, but not including, the first element for which the block returns nil or false and returns an array containing the remaining elements.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'each()', Description: 'Calls block once for each element in self, passing that element as a parameter.produces:', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'each_index()', Description: 'Same as each, but passes the index of the element instead of the element itself.produces:', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'empty?()', Description: 'Returns true if self array contains no elements.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'eql?(p1)', Description: 'Returns true if array and other are the same object, or are both arrays with the same content.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'fetch(...)', Description: 'Tries to return the element at position index. If the index lies outside the array, the first form throws an IndexError exception, the second form returns default, and the third form returns the value of invoking the block, passing in the index. Negative values of index count from the end of the array.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'fill(...)', Description: 'The first three forms set the selected elements of self (which may be the entire array) to obj. A start of nil is equivalent to zero. A length of nil is equivalent to self.length. The last three forms fill the array with the value of the block. The block is passed the absolute index of each element to be filled.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'find_index(...)', Description: 'Returns the index of the first object in self such that is == to obj. If a block is given instead of an argument, returns first object for which block is true. Returns nil if no match is found.This is an alias of find_index.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'first(...)', Description: 'Returns the first element, or the first n elements, of the array. If the array is empty, the first form returns nil, and the second form returns an empty array.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'flatten(...)', Description: 'Returns a new array that is a one-dimensional flattening of this array (recursively). That is, for every element that is an array, extract its elements into the new array. If the optional level argument determines the level of recursion to flatten.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'flatten!(...)', Description: 'Flattens self in place. Returns nil if no modifications were made (i.e., array contains no subarrays.) If the optional level argument determines the level of recursion to flatten.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'frozen?()', Description: 'Return true if this array is frozen (or temporarily frozen while being sorted).', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'hash()', Description: 'Compute a hash-code for this array. Two arrays with the same content will have the same hash code (and will compare using eql?).', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'include?(p1)', Description: 'Returns true if the given object is present in self (that is, if any object == anObject), false otherwise.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'include_method?(name)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'index(...)', Description: 'Returns the index of the first object in self such that is == to obj. If a block is given instead of an argument, returns first object for which block is true. Returns nil if no match is found.This is an alias of find_index.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'indexes(...)', Description: 'Deprecated; use values_at.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'indices(...)', Description: 'Deprecated; use values_at.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'initialize_copy(p1)', Description: 'Replaces the contents of self with the contents of other_array, truncating or expanding if necessary.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'insert(...)', Description: 'Inserts the given values before the element with the given index (which may be negative).', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'inspect()', Description: 'Create a printable version of array.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'join(...)', Description: 'Returns a string created by converting each element of the array to a string, separated by sep.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'last(...)', Description: 'Returns the last element(s) of self. If the array is empty, the first form returns nil.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'length()', Description: 'Returns the number of elements in self. May be zero.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'map()', Description: 'Invokes block once for each element of self. Creates a new array containing the values returned by the block. See also Enumerable#collect.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'map!()', Description: 'Invokes the block once for each element of self, replacing the element with the value returned by block. See also Enumerable#collect.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'nitems()', Description: 'Returns the number of non-nil elements in self.May be zero.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'pack(p1)', Description: 'Packs the contents of arr into a binary sequence according to the directives in aTemplateString (see the table below) Directives ``A,‘’ ``a,’’ and ``Z’’ may be followed by a count, which gives the width of the resulting field. The remaining directives also may take a count, indicating the number of array elements to convert. If the count is an asterisk (``*‘’), all remaining array elements will be converted. Any of the directives ``sSiIlL’’ may be followed by an underscore (``_‘’) to use the underlying platform’s native size for the specified type; otherwise, they use a platform-independent size. Spaces are ignored in the template string. See also String#unpack.Directives for pack.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'permutation(...)', Description: 'When invoked with a block, yield all permutations of length n of the elements of ary, then return the array itself. If n is not specified, yield all permutations of all elements. The implementation makes no guarantees about the order in which the permutations are yielded.When invoked without a block, return an enumerator object instead.Examples:', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'pop(...)', Description: 'Removes the last element from self and returns it, or nil if the array is empty.If a number n is given, returns an array of the last n elements (or less) just like array.slice!(-n, n) does.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'pretty_print(q)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'pretty_print_cycle(q)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'product(...)', Description: 'Returns an array of all combinations of elements from all arrays. The length of the returned array is the product of the length of ary and the argument arrays', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'push(...)', Description: 'Append—-Pushes the given object(s) on to the end of this array. This expression returns the array itself, so several appends may be chained together.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'rassoc(p1)', Description: 'Searches through the array whose elements are also arrays. Compares key with the second element of each contained array using ==. Returns the first contained array that matches. See also assoc.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'reject()', Description: 'Returns a new array containing the items in self for which the block is not true.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'reject!()', Description: 'Equivalent to delete_if, deleting elements from self for which the block evaluates to true, but returns nil if no changes were made. Also see Enumerable#reject.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'replace(p1)', Description: 'Replaces the contents of self with the contents of other_array, truncating or expanding if necessary.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'reverse()', Description: 'Returns a new array containing self’s elements in reverse order.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'reverse!()', Description: 'Reverses self in place.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'reverse_each()', Description: 'Same as each, but traverses self in reverse order.produces:', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'rindex(...)', Description: 'Returns the index of the last object in array == to obj. If a block is given instead of an argument, returns first object for which block is true. Returns nil if no match is found.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'select()', Description: 'Invokes the block passing in successive elements from array, returning an array containing those elements for which the block returns a true value (equivalent to Enumerable#select).', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'shelljoin()', Description: 'Builds a command line string from an argument list array joining all elements escaped for Bourne shell and separated by a space. See Shellwords::shelljoin for details.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'shift(...)', Description: 'Returns the first element of self and removes it (shifting all other elements down by one). Returns nil if the array is empty.If a number n is given, returns an array of the first n elements (or less) just like array.slice!(0, n) does.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'shuffle()', Description: 'Returns a new array with elements of this array shuffled.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'shuffle!()', Description: 'Shuffles elements in self in place.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'size()', Description: 'Alias for length', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'slice(...)', Description: 'Element Reference—-Returns the element at index, or returns a subarray starting at start and continuing for length elements, or returns a subarray specified by range. Negative indices count backward from the end of the array (-1 is the last element). Returns nil if the index (or starting index) are out of range.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'slice!(...)', Description: 'Deletes the element(s) given by an index (optionally with a length) or by a range. Returns the deleted object, subarray, or nil if the index is out of range. Equivalent to:', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'sort()', Description: 'Returns a new array created by sorting self. Comparisons for the sort will be done using the <=> operator or using an optional code block. The block implements a comparison between a and b, returning -1, 0, or +1. See also Enumerable#sort_by.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'sort!()', Description: 'Sorts self_. Comparisons for the sort will be done using the <=> operator or using an optional code block. The block implements a comparison between a and b, returning -1, 0, or +1. See also Enumerable#sortby.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'take(p1)', Description: 'Returns first n elements from ary.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'take_while()', Description: 'Passes elements to the block until the block returns nil or false, then stops iterating and returns an array of all prior elements.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'to_a()', Description: 'Returns self. If called on a subclass of Array, converts the receiver to an Array object.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'to_ary()', Description: 'Returns self.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'to_s()', Description: 'Returns self.join.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'to_yaml( opts = {} )', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'transpose()', Description: 'Assumes that self is an array of arrays and transposes the rows and columns.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'uniq()', Description: 'Returns a new array by removing duplicate values in self.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'uniq!()', Description: 'Removes duplicate elements from self. Returns nil if no changes are made (that is, no duplicates are found).', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'unshift(...)', Description: 'Prepends objects to the front of array. other elements up one.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'values_at(...)', Description: 'Returns an array containing the elements in self corresponding to the given selector(s). The selectors may be either integer indices or ranges. See also select.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'yaml_initialize( tag, val )', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'zip(...)', Description: 'Converts any arguments to arrays, then merges elements of self with corresponding elements from each argument. This generates a sequence of self.size n-element arrays, where n is one more that the count of arguments. If the size of any argument is less than enumObj.size, nil values are supplied. If a block given, it is invoked for each output array, otherwise an array of arrays is returned.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: '|(p1)', Description: 'Set Union—-Returns a new array by joining this array with other_array, removing duplicates.', OptionType: 'Function', ReturnType: 'Object' }
			]
		},
		{
			Name: "Hash",
			Options: [
				{ Name: '[](...)', Description: 'Creates a new hash populated with the given objects. Equivalent to the literal { <i>key</i>, <i>value</i>, ... }. Keys and values occur in pairs, so there must be an even number of arguments.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'new(...)', Description: 'Returns a new, empty hash. If this hash is subsequently accessed by a key that doesn’t correspond to a hash entry, the value returned depends on the style of new used to create the hash. In the first form, the access returns nil. If obj is specified, this single object will be used for all default values. If a block is specified, it will be called with the hash object and the key, and should return the default value. It is the block’s responsibility to store the value in the hash if required.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: '==(p1)', Description: 'Equality—-Two hashes are equal if they each contain the same number of keys and if each key-value pair is equal to (according to Object#==) the corresponding elements in the other hash.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: '[](p1)', Description: 'Element Reference—-Retrieves the value object corresponding to the key object. If not found, returns the a default value (see Hash::new for details).', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: '[]=(p1, p2)', Description: 'Element Assignment—-Associates the value given by value with the key given by key. key should not have its value changed while it is in use as a key (a String passed as a key will be duplicated and frozen).', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'clear()', Description: 'Removes all key-value pairs from hsh.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'default(...)', Description: 'Returns the default value, the value that would be returned by hsh[key] if key did not exist in hsh. See also Hash::new and default=.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'default=(p1)', Description: 'Sets the default value, the value returned for a key that does not exist in the hash. It is not possible to set the a default to a Proc that will be executed on each key lookup.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'default_proc()', Description: 'If Hash::new was invoked with a block, return that block, otherwise return nil.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'delete(p1)', Description: 'Deletes and returns a key-value pair from hsh whose key is equal to key. If the key is not found, returns nil. If the optional code block is given and the key is not found, pass in the key and return the result of block.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'delete_if()', Description: 'Deletes every key-value pair from hsh for which block evaluates to true.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'each()', Description: 'Calls block once for each key in hsh, passing the key and value to the block as a two-element array. Because of the assignment semantics of block parameters, these elements will be split out if the block has two formal parameters. Also see Hash.each_pair, which will be marginally more efficient for blocks with two parameters.produces:', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'each_key()', Description: 'Calls block once for each key in hsh, passing the key as a parameter.produces:', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'each_pair()', Description: 'Calls block once for each key in hsh, passing the key and value as parameters.produces:', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'each_value()', Description: 'Calls block once for each key in hsh, passing the value as a parameter.produces:', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'empty?()', Description: 'Returns true if hsh contains no key-value pairs.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'eql?(p1)', Description: 'Returns true if hash and other are both hashes with the same content.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'except(*keys)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'fetch(...)', Description: 'Returns a value from the hash for the given key. If the key can’t be found, there are several options: With no other arguments, it will raise an IndexError exception; if default is given, then that will be returned; if the optional code block is specified, then that will be run and its result returned.The following example shows that an exception is raised if the key is not found and a default value is not supplied.produces:', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'has_key?(p1)', Description: 'Returns true if the given key is present in hsh.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'has_value?(p1)', Description: 'Returns true if the given value is present for some key in hsh.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'hash()', Description: 'Compute a hash-code for this array. Two arrays with the same content will have the same hash code (and will compare using eql?).', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'include?(p1)', Description: 'Returns true if the given key is present in hsh.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'index(p1)', Description: 'Returns the key for a given value. If not found, returns nil.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'indexes(...)', Description: 'Deprecated in favor of select.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'indices(...)', Description: 'Deprecated in favor of select.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'initialize_copy(p1)', Description: 'Replaces the contents of hsh with the contents of other_hash.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'inspect()', Description: 'Return the contents of this hash as a string.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'invert()', Description: 'Returns a new hash created by using hsh’s values as keys, and the keys as values.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'key?(p1)', Description: 'Returns true if the given key is present in hsh.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'keys()', Description: 'Returns a new array populated with the keys from this hash. See also values.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'length()', Description: 'Returns the number of key-value pairs in the hash.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'member?(p1)', Description: 'Returns true if the given key is present in hsh.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'merge(p1)', Description: 'Returns a new hash containing the contents of other_hash and the contents of hsh, overwriting entries in hsh with duplicate keys with those from other_hash.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'merge!(p1)', Description: 'Adds the contents of other_hash to hsh. If no block is specified entries with duplicate keys are overwritten with the values from other_hash, otherwise the value of each duplicate key is determined by calling the block with the key, its value in hsh and its value in other_hash.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'only(*keys)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'pretty_print(q)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'pretty_print_cycle(q)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'rehash()', Description: 'Rebuilds the hash based on the current hash values for each key. If values of key objects have changed since they were inserted, this method will reindex hsh. If rehash is called while an iterator is traversing the hash, an IndexError will be raised in the iterator.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'reject()', Description: 'Same as delete_if, but works on (and returns) a copy of the hsh. Equivalent to <i>hsh</i>.dup.delete_if.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'reject!()', Description: 'Equivalent to delete_if, but returns nil if no changes were made.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'replace(p1)', Description: 'Replaces the contents of hsh with the contents of other_hash.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'select()', Description: 'Returns a new array consisting of [key,value] pairs for which the block returns true. Also see Hash.values_at.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'shift()', Description: 'Removes a key-value pair from hsh and returns it as the two-item array [ key, value ], or the hash’s default value if the hash is empty.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'size()', Description: 'Returns the number of key-value pairs in the hash.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'sort()', Description: 'Converts hsh to a nested array of [ key, value ] arrays and sorts it, using Array#sort.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'store(p1, p2)', Description: 'Element Assignment—-Associates the value given by value with the key given by key. key should not have its value changed while it is in use as a key (a String passed as a key will be duplicated and frozen).', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'symbolize_keys()', Description: 'Return a new hash with all keys converted to symbols.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'symbolize_keys!()', Description: 'Destructively convert all keys to symbols.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'to_a()', Description: 'Converts hsh to a nested array of [ key, value ] arrays.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'to_hash()', Description: 'Returns self.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'to_s()', Description: 'Converts hsh to a string by converting the hash to an array of [ key, value ] pairs and then converting that array to a string using Array#join with the default separator.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'to_yaml( opts = {} )', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'update(p1)', Description: 'Adds the contents of other_hash to hsh. If no block is specified entries with duplicate keys are overwritten with the values from other_hash, otherwise the value of each duplicate key is determined by calling the block with the key, its value in hsh and its value in other_hash.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'value?(p1)', Description: 'Returns true if the given value is present for some key in hsh.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'values()', Description: 'Returns a new array populated with the values from hsh. See also keys.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'values_at(...)', Description: 'Return an array containing the values associated with the given keys. Also see Hash.select.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'with(overrides = {})', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'yaml_initialize( tag, val )', Description: '', OptionType: 'Function', ReturnType: 'Object' }
			]
		},
		{
			Name: "Boolean",
			Options: [

			]
		},
		{
			Name: "File",
			Options: [
				{ Name: 'atime(p1)', Description: 'Returns the last access time for the named file as a Time object).', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'basename(...)', Description: 'Returns the last component of the filename given in file_name, which must be formed using forward slashes (``/’’) regardless of the separator used on the local file system. If suffix is given and present at the end of file_name, it is removed.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'binread(fname)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'binread(fname)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'binread(fname)', Description: 'Application independent utilities', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'binread(file)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'blockdev?(p1)', Description: 'Returns true if the named file is a block device.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'catname(from, to)', Description: 'If to is a valid directory, from will be appended to to, adding and escaping backslashes as necessary. Otherwise, to will be returned. Useful for appending from to to only if the filename was not specified in to.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'chardev?(p1)', Description: 'Returns true if the named file is a character device.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'chmod(mode, *files)', Description: 'Changes permission bits on files to the bit pattern represented by mode. If the last parameter isn’t a String, verbose mode will be enabled.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'chmod(...)', Description: 'Changes permission bits on the named file(s) to the bit pattern represented by mode_int. Actual effects are operating system dependent (see the beginning of this section). On Unix systems, see chmod(2) for details. Returns the number of files processed.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'chown(...)', Description: 'Changes the owner and group of the named file(s) to the given numeric owner and group id’s. Only a process with superuser privileges may change the owner of a file. The current owner of a file may change the file’s group to any group to which the owner belongs. A nil or -1 owner or group id is ignored. Returns the number of files processed.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'compare(from, to, verbose = false)', Description: 'Returns true if and only if the contents of files from and to are identical. If verbose is true, from <=> to is printed.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'copy(from, to, verbose = false)', Description: 'Copies a file from to to using syscopy. If to is a directory, copies from to to/from. If verbose is true, from ? to is printed.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'ctime(p1)', Description: 'Returns the change time for the named file (the time at which directory information about the file was changed, not the file itself).', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'delete(...)', Description: 'Deletes the named files, returning the number of names passed as arguments. Raises an exception on any error. See also Dir::rmdir.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'dir?(path)', Description: 'for corrupted windows stat(2)', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'dir?(path)', Description: 'for corrupted Windows’ stat(2)', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'dir?(path)', Description: 'for corrupted windows stat(2)', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'directory?(p1)', Description: 'Returns true if the named file is a directory, false otherwise.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'dirname(p1)', Description: 'Returns all components of the filename given in file_name except the last one. The filename must be formed using forward slashes (``/’’) regardless of the separator used on the local file system.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'executable?(p1)', Description: 'Returns true if the named file is executable by the effective user id of this process.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'executable_real?(p1)', Description: 'Returns true if the named file is executable by the real user id of this process.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'exist?(p1)', Description: 'Return true if the named file exists.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'exists?(p1)', Description: 'Return true if the named file exists.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'expand_path(...)', Description: 'Converts a pathname to an absolute pathname. Relative paths are referenced from the current working directory of the process unless dir_string is given, in which case it will be used as the starting point. The given pathname may start with a ``~‘’, which expands to the process owner’s home directory (the environment variable HOME must be set correctly). ``~user‘’ expands to the named user’s home directory.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'extname(p1)', Description: 'Returns the extension (the portion of file name in path after the period).', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'file?(p1)', Description: 'Returns true if the named file exists and is a regular file.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'fnmatch(...)', Description: 'Returns true if path matches against pattern The pattern is not a regular expression; instead it follows rules similar to shell filename globbing. It may contain the following metacharacters:flags is a bitwise OR of the FNM_xxx parameters. The same glob pattern and flags are used by Dir::glob.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'fnmatch?(...)', Description: 'Returns true if path matches against pattern The pattern is not a regular expression; instead it follows rules similar to shell filename globbing. It may contain the following metacharacters:flags is a bitwise OR of the FNM_xxx parameters. The same glob pattern and flags are used by Dir::glob.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'ftype(p1)', Description: 'Identifies the type of the named file; the return string is one of ``file‘’, ``directory’‘, ``characterSpecial’‘, ``blockSpecial’‘, ``fifo’‘, ``link’‘, ``socket’‘, or ``unknown’’.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'grpowned?(p1)', Description: 'Returns true if the named file exists and the effective group id of the calling process is the owner of the file. Returns false on Windows.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'identical?(p1, p2)', Description: 'Returns true if the named files are identical.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'install(from, to, mode = nil, verbose = false)', Description: 'If src is not the same as dest, copies it and changes the permission mode to mode. If dest is a directory, destination is dest/src. If mode is not set, default is used. If verbose is set to true, the name of each file copied will be printed.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'join(...)', Description: 'Returns a new string formed by joining the strings using File::SEPARATOR.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'lchmod(...)', Description: 'Equivalent to File::chmod, but does not follow symbolic links (so it will change the permissions associated with the link, not the file referenced by the link). Often not available.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'lchown(...)', Description: 'Equivalent to File::chown, but does not follow symbolic links (so it will change the owner associated with the link, not the file referenced by the link). Often not available. Returns number of files in the argument list.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'link(p1, p2)', Description: 'Creates a new name for an existing file using a hard link. Will not overwrite new_name if it already exists (raising a subclass of SystemCallError). Not available on all platforms.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'lstat(p1)', Description: 'Same as File::stat, but does not follow the last symbolic link. Instead, reports on the link itself.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'makedirs(*dirs)', Description: 'Creates a directory and all its parent directories. For example,File.makedirs ‘/usr/lib/ruby’causes the following directories to be made, if they do not exist.You can pass several directories, each as a parameter. If the last parameter isn’t a String, verbose mode will be enabled.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'move(from, to, verbose = false)', Description: 'Moves a file from to to using syscopy. If to is a directory, copies from from to to/from. If verbose is true, from ? to is printed.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'mtime(p1)', Description: 'Returns the modification time for the named file as a Time object.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'new(...)', Description: 'Opens the file named by filename according to mode (default is ``r’’) and returns a new File object. See the description of class IO for a description of mode. The file mode may optionally be specified as a Fixnum by or_-ing together the flags (ORDONLY etc, again described under IO). Optional permission bits may be given in perm. These mode and permission bits are platform dependent; on Unix systems, see open(2) for details.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'owned?(p1)', Description: 'Returns true if the named file exists and the effective used id of the calling process is the owner of the file.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'pipe?(p1)', Description: 'Returns true if the named file is a pipe.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'read(fname)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'read(fname)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'read(fname)', Description: '', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'readable?(p1)', Description: 'Returns true if the named file is readable by the effective user id of this process.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'readable_real?(p1)', Description: 'Returns true if the named file is readable by the real user id of this process.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'readlink(p1)', Description: 'Returns the name of the file referenced by the given link. Not available on all platforms.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'rename(p1, p2)', Description: 'Renames the given file to the new name. Raises a SystemCallError if the file cannot be renamed.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'safe_unlink(*files)', Description: 'Removes a list of files. Each parameter should be the name of the file to delete. If the last parameter isn’t a String, verbose mode will be enabled. Returns the number of files deleted.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'setgid?(p1)', Description: 'Returns true if the named file has the setgid bit set.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'setuid?(p1)', Description: 'Returns true if the named file has the setuid bit set.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'size(p1)', Description: 'Returns the size of file_name.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'size?(p1)', Description: 'Returns nil if file_name doesn’t exist or has zero size, the size of the file otherwise.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'socket?(p1)', Description: 'Returns true if the named file is a socket.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'split(p1)', Description: 'Splits the given string into a directory and a file component and returns them in a two-element array. See also File::dirname and File::basename.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'stat(p1)', Description: 'Returns a File::Stat object for the named file (see File::Stat).', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'sticky?(p1)', Description: 'Returns true if the named file has the sticky bit set.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'symlink(p1, p2)', Description: 'Creates a symbolic link called new_name for the existing file old_name. Raises a NotImplemented exception on platforms that do not support symbolic links.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'symlink?(p1)', Description: 'Returns true if the named file is a symbolic link.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'syscopy(from, to)', Description: 'Copies a file from to to. If to is a directory, copies from to to/from.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'truncate(p1, p2)', Description: 'Truncates the file file_name to be at most integer bytes long. Not available on all platforms.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'umask(...)', Description: 'Returns the current umask value for this process. If the optional argument is given, set the umask to that value and return the previous value. Umask values are subtracted from the default permissions, so a umask of 0222 would make a file read-only for everyone.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'unlink(...)', Description: 'Deletes the named files, returning the number of names passed as arguments. Raises an exception on any error. See also Dir::rmdir.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'utime(...)', Description: 'Sets the access and modification times of each named file to the first two arguments. Returns the number of file names in the argument list.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'writable?(p1)', Description: 'Returns true if the named file is writable by the effective user id of this process.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'writable_real?(p1)', Description: 'Returns true if the named file is writable by the real user id of this process.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'zero?(p1)', Description: 'Returns true if the named file exists and has a zero size.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'atime()', Description: 'Returns the last access time (a Time object)', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'chmod(p1)', Description: 'Changes permission bits on file to the bit pattern represented by mode_int. Actual effects are platform dependent; on Unix systems, see chmod(2) for details. Follows symbolic links. Also see lchmod.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'chown(p1, p2)', Description: 'Changes the owner and group of file to the given numeric owner and group id’s. Only a process with superuser privileges may change the owner of a file. The current owner of a file may change the file’s group to any group to which the owner belongs. A nil or -1 owner or group id is ignored. Follows symbolic links. See also lchown.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'ctime()', Description: 'Returns the change time for file (that is, the time directory information about the file was changed, not the file itself).', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'flock(p1)', Description: 'Locks or unlocks a file according to locking_constant (a logical or of the values in the table below). Returns false if File::LOCK_NB is specified and the operation would otherwise have blocked. Not available on all platforms.Locking constants (in class File):Example:', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'lstat()', Description: 'Same as IO#stat, but does not follow the last symbolic link. Instead, reports on the link itself.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'mtime()', Description: 'Returns the modification time for file.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'o_chmod(p1)', Description: 'Alias for chmod', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'path()', Description: 'Returns the pathname used to create file as a string. Does not normalize the name.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'truncate(p1)', Description: 'Truncates file to at most integer bytes. The file must be opened for writing. Not available on all platforms.', OptionType: 'Function', ReturnType: 'Object' }
			]
		},
		{
			Name: "Dir",
			Options: [
				{ Name: '[](...)', Description: 'Equivalent to calling Dir.glob(array,0) and Dir.glob([string,…],0).', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'chdir(...)', Description: 'Changes the current working directory of the process to the given string. When called without an argument, changes the directory to the value of the environment variable HOME, or LOGDIR. SystemCallError (probably Errno::ENOENT) if the target directory does not exist.If a block is given, it is passed the name of the new current directory, and the block is executed with that as the current directory. The original working directory is restored when the block exits. The return value of chdir is the value of the block. chdir blocks can be nested, but in a multi-threaded program an error will be raised if a thread attempts to open a chdir block while another thread has one open.produces:', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'chroot(p1)', Description: 'Changes this process’s idea of the file system root. Only a privileged process may make this call. Not available on all platforms. On Unix systems, see chroot(2) for more information.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'delete(p1)', Description: 'Deletes the named directory. Raises a subclass of SystemCallError if the directory isn’t empty.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'entries(p1)', Description: 'Returns an array containing all of the filenames in the given directory. Will raise a SystemCallError if the named directory doesn’t exist.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'foreach(p1)', Description: 'Calls the block once for each entry in the named directory, passing the filename of each entry as a parameter to the block.produces:', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'getwd()', Description: 'Returns the path to the current working directory of this process as a string.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'glob(...)', Description: 'Returns the filenames found by expanding pattern which is an Array of the patterns or the pattern String, either as an array or as parameters to the block. Note that this pattern is not a regexp (it’s closer to a shell glob). See File::fnmatch for the meaning of the flags parameter. Note that case sensitivity depends on your system (so File::FNM_CASEFOLD is ignored)', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'mkdir(...)', Description: 'Makes a new directory named by string, with permissions specified by the optional parameter anInteger. The permissions may be modified by the value of File::umask, and are ignored on NT. Raises a SystemCallError if the directory cannot be created. See also the discussion of permissions in the class documentation for File.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'mktmpdir(prefix_suffix=nil, tmpdir=nil)', Description: 'Dir.mktmpdir creates a temporary directory.The directory is created with 0700 permission.The prefix and suffix of the name of the directory is specified by the optional first argument, prefix_suffix.The directory is created under Dir.tmpdir or the optional second argument tmpdir if non-nil value is given.If a block is given, it is yielded with the path of the directory. The directory and its contents are removed using FileUtils.remove_entry_secure before Dir.mktmpdir returns. The value of the block is returned.If a block is not given, The path of the directory is returned. In this case, Dir.mktmpdir doesn’t remove the directory.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'new(p1)', Description: 'Returns a new directory object for the named directory.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'open(p1)', Description: 'With no block, open is a synonym for Dir::new. If a block is present, it is passed aDir as a parameter. The directory is closed at the end of the block, and Dir::open returns the value of the block.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'pwd()', Description: 'Returns the path to the current working directory of this process as a string.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'rmdir(p1)', Description: 'Deletes the named directory. Raises a subclass of SystemCallError if the directory isn’t empty.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'tmpdir()', Description: 'Returns the operating system’s temporary file path.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'unlink(p1)', Description: 'Deletes the named directory. Raises a subclass of SystemCallError if the directory isn’t empty.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'user_home()', Description: 'User home directory lookup adapted from RubyGems.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'close()', Description: 'Closes the directory stream. Any further attempts to access dir will raise an IOError.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'each()', Description: 'Calls the block once for each entry in this directory, passing the filename of each entry as a parameter to the block.produces:', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'inspect()', Description: 'Return a string describing this Dir object.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'path()', Description: 'Returns the path parameter passed to dir’s constructor.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'pos()', Description: 'Returns the current position in dir. See also seek.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'pos=(p1)', Description: 'Synonym for seek, but returns the position parameter.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'read()', Description: 'Reads the next entry from dir and returns it as a string. Returns nil at the end of the stream.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'rewind()', Description: 'Repositions dir to the first entry.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'seek(p1)', Description: 'Seeks to a particular location in dir. integer must be a value returned by tell.', OptionType: 'Function', ReturnType: 'Object' },
				{ Name: 'tell()', Description: 'Returns the current position in dir. See also seek.', OptionType: 'Function', ReturnType: 'Object' }
			]
		},
		{
			Name: "DateTime",
			Options: [
				{ Name: 'civil(y=-4712, m=1, d=1, h=0, min=0, s=0, of=0, sg=ITALY)', Description: 'Create a new DateTime object corresponding to the specified Civil Date and hour h, minute min, second s.The 24-hour clock is used. Negative values of h, min, and sec are treating as counting backwards from the end of the next larger unit (e.g. a min of -2 is treated as 58). No wraparound is performed. If an invalid time portion is specified, an ArgumentError is raised.of is the offset from UTC as a fraction of a day (defaults to 0). sg specifies the Day of Calendar Reform.y defaults to -4712, m to 1, and d to 1; this is Julian Day Number day 0. The time values default to 0.', OptionType: 'Function', ReturnType: 'String' },
				{ Name: 'commercial(y=1582, w=41, d=5, h=0, min=0, s=0, of=0, sg=ITALY)', Description: 'Create a new DateTime object corresponding to the specified Commercial Date and hour h, minute min, second s.The 24-hour clock is used. Negative values of h, min, and sec are treating as counting backwards from the end of the next larger unit (e.g. a min of -2 is treated as 58). No wraparound is performed. If an invalid time portion is specified, an ArgumentError is raised.of is the offset from UTC as a fraction of a day (defaults to 0). sg specifies the Day of Calendar Reform.y defaults to 1582, w to 41, and d to 5; this is the Day of Calendar Reform for Italy and the Catholic countries. The time values default to 0.', OptionType: 'Function', ReturnType: 'String' },
				{ Name: 'jd(jd=0, h=0, min=0, s=0, of=0, sg=ITALY)', Description: 'Create a new DateTime object corresponding to the specified Julian Day Number jd and hour h, minute min, second s.The 24-hour clock is used. Negative values of h, min, and sec are treating as counting backwards from the end of the next larger unit (e.g. a min of -2 is treated as 58). No wraparound is performed. If an invalid time portion is specified, an ArgumentError is raised.of is the offset from UTC as a fraction of a day (defaults to 0). sg specifies the Day of Calendar Reform.All day/time values default to 0.', OptionType: 'Function', ReturnType: 'String' },
				{ Name: 'ordinal(y=-4712, d=1, h=0, min=0, s=0, of=0, sg=ITALY)', Description: 'Create a new DateTime object corresponding to the specified Ordinal Date and hour h, minute min, second s.The 24-hour clock is used. Negative values of h, min, and sec are treating as counting backwards from the end of the next larger unit (e.g. a min of -2 is treated as 58). No wraparound is performed. If an invalid time portion is specified, an ArgumentError is raised.of is the offset from UTC as a fraction of a day (defaults to 0). sg specifies the Day of Calendar Reform.y defaults to -4712, and d to 1; this is Julian Day Number day 0. The time values default to 0.', OptionType: 'Function', ReturnType: 'String' },
				{ Name: 'parse(str=\'-4712-01-01T00:00:00+00:00\', comp=false, sg=ITALY)', Description: 'Create a new DateTime object by parsing from a String, without specifying the format.str is a String holding a date-time representation. comp specifies whether to interpret 2-digit years as 19XX (>= 69) or 20XX (< 69); the default is not to. The method will attempt to parse a date-time from the String using various heuristics; see #_parse in date/format.rb for more details. If parsing fails, an ArgumentError will be raised.The default str is ‘-4712-01-01T00:00:00+00:00’; this is Julian Day Number day 0.sg specifies the Day of Calendar Reform.', OptionType: 'Function', ReturnType: 'String' },
				{ Name: 'strptime(str=\'-4712-01-01T00:00:00+00:00\', fmt=\'%FT%T%z\', sg=ITALY)', Description: 'Create a new DateTime object by parsing from a String according to a specified format.str is a String holding a date-time representation. fmt is the format that the date-time is in. See date/format.rb for details on supported formats.The default str is ‘-4712-01-01T00:00:00+00:00’, and the default fmt is ‘%FT%T%z’. This gives midnight on Julian Day Number day 0.sg specifies the Day of Calendar Reform.An ArgumentError will be raised if str cannot be parsed.', OptionType: 'Function', ReturnType: 'String' },
				{ Name: 'as_json(options = nil)', Description: 'Coerces the datetime to a string for JSON encoding.ISO 8601 format is used if ActiveSupport::JSON::Encoding.use_standard_json_time_format is set.', OptionType: 'Function', ReturnType: 'String' },
				{ Name: 'strftime(fmt=\'%FT%T%:z\')', Description: '', OptionType: 'Function', ReturnType: 'String' },
				{ Name: 'to_s()', Description: ':minute, :second, :second_fraction', OptionType: 'Function', ReturnType: 'String' }
			]
		}
	]
}